package entity;

import java.util.*;

//class that is used to represent a weighted directed graph
public class AdjacencyList<T> 
{
	private Map<T,LinkedList<Edge<T>>> adjacencyList;
	
	//constructor
	public AdjacencyList()
	{
		this.adjacencyList = new HashMap<>();
	}
	
	//Adds a new vertex
	public void addVertex(T vertex){
		this.adjacencyList.put(vertex, new LinkedList<Edge<T>>());
	}
	
	public void addDirectedEdgeToVertex(T vertex, T destination, int weight){
		if(!this.adjacencyList.containsKey(vertex)) {
			this.addVertex(vertex);
		}
		
		System.out.println("whatttt");
		Edge<T> toAdd = new Edge<T>(destination, weight);
		if(!this.adjacencyList.get(vertex).contains(toAdd)) 
		{
			this.adjacencyList.get(vertex).addLast(toAdd);
		}
		
	}
	
	public void addUndirectedEdgeToVertex(T vertex,T destination, int weight)
	{	
		this.addDirectedEdgeToVertex(vertex, destination, weight);
		this.addDirectedEdgeToVertex(destination, vertex, weight);
	}
	
	public int getWeightBetween(T vertex,T destination){
		Optional<Edge<T>> edge = this.adjacencyList.get(vertex)
					              .stream()
			                      .filter(e->e.getDestination().equals(destination))
			                      .findFirst();
		
		if(edge.isPresent()) {
			return edge.get().getWeight();
		}
		
		return Integer.MAX_VALUE;
	}
	
	public LinkedList<T> getVertices(){
		return new LinkedList<T>(this.adjacencyList.keySet());
	}
}
